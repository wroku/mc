from django.test import TestCase
from .models import Ingredient, FoodCategory, Recipe, Quantity
from django.contrib.auth.models import User
from django.db import IntegrityError
from django.core.exceptions import ValidationError
from decimal import *

# Create your tests here.


class IngredientModelTest(TestCase):

    def setUp(self):
        category = FoodCategory(name='Example Cat').save()
        Ingredient.objects.create(name='Example Ing',
                                  category=category,
                                  price=5,
                                  calval=1,
                                  total_carbs=1,
                                  total_fat=1,
                                  total_proteins=1)
        Ingredient.objects.create(name='Second Ing',
                                  category=category,
                                  price=5,
                                  calval=1,
                                  total_carbs=1,
                                  total_fat=1,
                                  total_proteins=1)

    def test_check_ingredient_slugifier(self):
        ingredient = Ingredient.objects.get(name='Example Ing')
        self.assertEqual(ingredient.slug, 'example-ing')

    def test_create_duplicate_ingredient(self):
        """
        Creating second ingredient with identical name (case-insensitive) should be unsuccessful due to unique constraint on
        autogenerated slug field
        """
        with self.assertRaises(Exception) as raised:
            Ingredient.objects.create(name='eXaMpLe InG',
                                      category=FoodCategory.objects.get(name='Example Cat'),
                                      price=5,
                                      calval=1,
                                      total_carbs=1,
                                      total_fat=1,
                                      total_proteins=1)
            self.assertEqual(IntegrityError, type(raised.exception))

    def test_check_for_invalid_macronutrients_qts(self):
        """
        Model's clean() method should prohibit from creating ingredients with macronutrient's sum exceeding 100g
        """
        with self.assertRaises(Exception) as raised:
            Ingredient.objects.create(name="Bodybuilder's dream",
                                      category=FoodCategory.objects.get(name='Example Cat'),
                                      price=0.1,
                                      calval=9999,
                                      total_carbs=300,
                                      total_fat=44,
                                      total_proteins=999)
            self.assertEqual(ValidationError, type(raised.exception))

    def test_default_values(self):
        ingredient = Ingredient.objects.get(name='Example Ing')
        self.assertEqual(ingredient.height_field, 0)
        self.assertEqual(ingredient.width_field, 0)
        self.assertEqual(ingredient.accepted, False)

    def test_blank_search(self):
        """
        Blank search should return unfiltered queryset with all created ingredients.
        """
        ingredient = Ingredient.objects.get(name='Example Ing')
        qs = Ingredient.objects.search()
        self.assertEqual(len(qs), 2)
        self.assertEqual(qs[0], ingredient)

    def test_no_match_search(self):
        qs = Ingredient.objects.search(query='Almond')
        self.assertEqual(len(qs), 0)

    def test_one_word_search(self):
        """
        In case of no results for full query search engine looks for individual words
        """
        qs = Ingredient.objects.search(query='Whatever Ing')
        self.assertEqual(len(qs), 2)

    def test_case_insensitive_exact_match_search(self):
        """
        Search feature is case insensitive and exact match prohibits single-word searching
        """
        ingredient = Ingredient.objects.get(name='Example Ing')
        qs = Ingredient.objects.search(query='exAmPle iNG')
        self.assertEqual(qs[0], ingredient)

    def test_stripping_s_search(self):
        """
        Query word ending with 's' shouldn't affect search
        """
        qs = Ingredient.objects.search(query='all ings')
        self.assertEqual(len(qs), 2)


class FoodCategoryModelTest(TestCase):

    def setUp(self):
        FoodCategory(name='Example Cat').save()

    def test_check_category_slugifier(self):
        category = FoodCategory.objects.get(name='Example Cat')
        self.assertEqual(category.slug, 'example-cat')

    def test_create_duplicate_category(self):
        """
        Creating second category with identical name (case-insensitive) should be unsuccessful due to unique constraint on
        autogenerated slug field
        """
        with self.assertRaises(Exception) as raised:
            FoodCategory.objects.create(name='ExAmPlE CaT')
            self.assertEqual(IntegrityError, type(raised.exception))


class RecipeModelTest(TestCase):

    def setUp(self):
        category = FoodCategory(name='Example Cat').save()
        # This user has autogenerated id=1, Recipe model default
        User.objects.create_user(username="user1", is_superuser=True, password="test1234")
        recipe = Recipe(recipe_name='Example Recipe')
        recipe.save()

        defaults = {'name': 'Ing',
                    'category': category,
                    'price': 10,
                    'calval': 100,
                    'total_carbs': 10,
                    'total_fat': 10,
                    'total_proteins': 10}

        for i in range(1, 6):
            defaults['name'] = defaults['name'][:3] + str(i)
            defaults['price'] += 1
            defaults['calval'] += 10
            defaults['total_carbs'] += 5
            defaults['total_fat'] += 5
            defaults['total_proteins'] += 5
            ingredient = Ingredient(**defaults)
            ingredient.save()
            Quantity(recipe=recipe,
                     ingredient=ingredient,
                     quantity=100).save()

    def test_recipe_slugifier(self):
        recipe = Recipe.objects.get(recipe_name='Example Recipe')
        self.assertEqual(recipe.recipe_slug, 'example-recipe')

    def test_recipe_default_values(self):
        recipe = Recipe.objects.get(recipe_name='Example Recipe')
        self.assertEqual(recipe.height_field, 0)
        self.assertEqual(recipe.width_field, 0)
        self.assertEqual(recipe.preparation_time, 45)
        self.assertEqual(recipe.servings, 2)
        self.assertEqual(recipe.accepted, False)

    def test_recipe_calories_calculator(self):
        """
        Trigger recipe model pre-save receiver and check calories_per_serving value for quantities defined in setUp
        """
        recipe = Recipe.objects.get(recipe_name='Example Recipe')
        recipe.save()
        self.assertEqual(recipe.calories_per_serving, 325)

    def test_recipe_price_calculator(self):
        """
        Trigger recipe model pre-save receiver and check price_per_serving value for quantities defined in setUp
        """
        recipe = Recipe.objects.get(recipe_name='Example Recipe')
        recipe.save()
        self.assertEqual(recipe.price_per_serving, Decimal('3.25'))

    def test_recalculating(self):
        recipe = Recipe.objects.get(recipe_name='Example Recipe')
        recipe.servings = 3
        recipe.save()
        self.assertEqual(recipe.calories_per_serving, 217)
        self.assertEqual(recipe.price_per_serving, Decimal('2.17'))
