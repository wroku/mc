from django.test import TestCase
from .models import Ingredient, FoodCategory
from django.db import IntegrityError
# Create your tests here.

class IngredientModelTest(TestCase):

    def setUp(self):
        category = FoodCategory(name='Example Cat').save()
        Ingredient.objects.create(name='Example Ing',
                                  category=category,
                                  price=5,
                                  calval=1,
                                  total_carbs=1,
                                  total_fat=1,
                                  total_proteins=1)
        Ingredient.objects.create(name='Second Ing',
                                  category=category,
                                  price=5,
                                  calval=1,
                                  total_carbs=1,
                                  total_fat=1,
                                  total_proteins=1)

    def test_check_ingredient_slugifier(self):
        ingredient = Ingredient.objects.get(name='Example Ing')
        self.assertEqual(ingredient.slug, 'example-ing')

    def test_create_duplicate_ingredient(self):
        '''
        Creating second ingredient with identical name should be unsuccessful due to unique constraint on
        autogenerated slug field
        '''
        with self.assertRaises(Exception) as raised:
            Ingredient.objects.create(name='Example Ing',
                                      category=FoodCategory.objects.get(name='Example Cat'),
                                      price=5,
                                      calval=1,
                                      total_carbs=1,
                                      total_fat=1,
                                      total_proteins=1)
            self.assertEqual(IntegrityError, type(raised.exception))

    def test_default_values(self):
        ingredient = Ingredient.objects.get(name='Example Ing')
        self.assertEqual(ingredient.height_field, 0)
        self.assertEqual(ingredient.width_field, 0)
        self.assertEqual(ingredient.accepted, False)

    def test_blank_search(self):
        '''
        Blank search should return unfiltered queryset with all created ingredients.
        '''
        ingredient = Ingredient.objects.get(name='Example Ing')
        qs = Ingredient.objects.search()
        self.assertEqual(len(qs), 2)
        self.assertEqual(qs[0], ingredient)

    def test_no_match_search(self):
        qs = Ingredient.objects.search(query='Almond')
        self.assertEqual(len(qs), 0)

    def test_one_word_search(self):
        '''
        In case of no results for full query search engine looks for individual words
        '''
        qs = Ingredient.objects.search(query='Whatever Ing')
        self.assertEqual(len(qs), 2)

    def test_case_insensitive_exact_match_search(self):
        '''
        Search feature is case insensitive and exact match prohibits single-word searching
        '''
        ingredient = Ingredient.objects.get(name='Example Ing')
        qs = Ingredient.objects.search(query='exAmPle iNG')
        self.assertEqual(qs[0], ingredient)

    def test_stripping_s_search(self):
        '''
        Query word ending with 's' shouldn't affect search
        '''
        qs = Ingredient.objects.search(query='all ings')
        self.assertEqual(len(qs), 2)
        





